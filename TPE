Tablero
El tablero es un cuadrado de NxN donde N puede ser 4, 6 ú 8 dependiendo de la
dificultad que se elija.

Dificultad de los tableros

 1 Fácil: el tablero es de 8x8 y la meta es llegar a 1024, con 8 undo
 2 Intermedio: el tablero es de 6x6 y la meta es llegar a 2048, con 4 undo
 3 Difícil: el tablero es de 4x4 y la meta es llegar a 2048, con 2 undo

Disposición inicial del tablero. Ejemplo para tablero de 4x4
Al inicio de la partida, el tablero se encuentra ocupado por solo dos fichas de valor 2,
ubicadas de forma aleatoria en el tablero. Se le muestran al jugador la puntación
actual (cero) y los undo restantes.

Fin del  juego .
  Derrota del jugador
  El jugador es derrotado cuando se cumplen estas situaciones:
   El jugador realiza un movimiento que lo deja sin movimientos posibles
   No dispone de movimientos UNDO
  Victoria del jugador
  Se considera que el jugador ha ganado el juego cuando ha alcanzado la meta numérica
  de la dificultad elegida: 1024 para fácil, 2048 para intermedio y difícil.
  
Descripción funcional del programa
  El programa deberá presentar un menú que permita elegir entre las siguientes opciones:
    1. Juego nuevo.
    1.1. Juego fácil.
    1.2. Juego intermedio
    1.3. Juego difícil
    2. Recuperar un juego grabado (deberá solicitar el nombre del archivo)
    3. Salir.

Juego Nuevo
  Al comenzar un juego nuevo el usuario deberá especificar la dificultad del tablero
  (deberá elegir entre fácil, intermedio y difícil).
  Una vez establecidas las dimensiones del tablero en base a la dificultad elegida, se
  ubicarán las fichas iniciales de manera automática, según lo indicado en los apartados
  “Disposición inicial del tablero” y “Dificultad de los tableros”
  
Mecánica de juego
El tablero al inicio se mostrará en blanco al jugador, a excepción de las 2 fichas iniciales.
(Los colores son meramente ilustrativos)

Las jugadas ingresadas pueden ser:
 a, w, s, d (izq, arriba, abajo, derecha)
 save filename
guardará el juego en un archivo de nombre  filename. Donde filename es una
secuencia de caracteres de hasta 35 caracteres (si el usuario ingresa más pueden
ignorarse)
 quit
saldrá del juego, preguntando si desea guardar el mismo en un archivo.
 undo
volverá al estado anterior. En caso de repetir en forma inmediata esta acción, la
segunda no tendrá efecto. Debe controlar que tenga disponibles la cantidad de
undo.

Final del juego: partida ganada
El jugador llega al objetivo del nivel de dificultad. Se debe informar la situación y
preguntar si desea salir o volver al menú principal

Recuperar juego
Juego individual guardado
El archivo debió ser guardado durante alguna partida con la opción save filename, o bien
al hacer quit y decidir guardar.
El archivo binario en el cual se almacena un partido debe ser el siguiente (respetando el
orden y tipo)
 Un unsigned short int con el nivel de dificultad (1, fácil; 2, intermedio; 3, difícil)
 Un entero sin signo con la cantidad de puntos
 La secuencia de unsigned short int que representan los valores del tablero, (usar
Cero para el vacío) ordenados por fila. La celda superior izquierda es la que debe
aparecer primero, seguida del resto de la fila. Luego la segunda fila y así
sucesivamente.
El archivo del partido guardado no debe ser editable con un editor de texto, su formato es
“binario”.

Diseño e implementación del programa
Se debe realizar un diseño donde se separe claramente la interfaz con el usuario (front-
end) del procesamiento de los datos del juego (back-end). Esto se verá reflejado en la
implementación de una biblioteca de funciones de back-end en el archivo  2048Back.c y
otro conjunto de funciones de front-end que invocan a la biblioteca. Estas últimas incluyen a
la función main y corresponden al archivo 2048Front.c.
En ningún caso se debe repetir código para resolver situaciones similares, sino que debe
implementarse una correcta modularización y se deben reutilizar funciones parametrizadas.
Tanto la biblioteca como el front-end deben estar correctamente comentados y en el caso
de la biblioteca se debe escribir el archivo de encabezado correspondiente.
El programa no debe abortar por ningún motivo y ante cualquier error se debe mostrar
un mensaje adecuado.

ALGUNOS CONSEJOS:
No escribir el programa entero y después probarlo todo junto, sino escribir cada función,
probándola por separado. Programar defensivamente en todos los casos.
Escribir el esquema de cada función primero en papel, pudiendo utilizar pseudocódigo o
lenguaje coloquial.
Una buena metodología es comenzar a escribir las funciones de más alto nivel, cableando
las inferiores con cuerpo nulo o con un valor fijo, e ir reemplazándolas de a una por vez, en la
medida en que al integrarlas todo siga funcionando correctamente. Esto es implementación
Top-Down.
Otra metodología es comenzar a escribir las funciones desde el nivel inferior, una por
vez, probando a cada una con un pequeño main que sólo la invoque a ella. Una vez
escritas y verificadas todas las funciones, unificarlas en un solo módulo. Esto es
implementación Bottom-Up.
