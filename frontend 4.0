#include <stdio.h>
#include "getnum.h"
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include "backend.h"

#define CUAT_LETRAS 4
#define MAX_NOMBRE 35

enum estado {MOVIMIENTO=1, UNDO, QUIT, SAVE, ERROR};
enum dificultad {FACIL=1, INTERMEDIO, DIFICIL};
enum opcion {JUEGO_NUEVO=1, CARGAR, SALIR};

void bienvenida(void);
int menu(void);
int juegoNuevo(int dificultad);
void anunciaDific(int dificultad);
void impMatriz(int **matriz, juegoT * pjugada);
int leerEntrada(char nombreArchivo[MAX_NOMBRE], char *dirVec);
int comienzo(int opcion, juegoT * pjugada);
int comienzoJuego(juegoT * pjugada);
int comandos(juegoT * pjugada, int * flagComienzo);
int salir(int salirAMenu);
char * tomaLinea(void);


int
main()
{
srand(time(NULL));

juegoT pjugada;
int juego=0, salir=0;

bienvenida();
do {
    juego=menu();
    salir=comienzo(juego, &pjugada);
} while(salir!=1);

return 0;
}

void
bienvenida(void)
{
printf("    Bienvenido al juego 2048!\n");
printf("\t(Version 1.0)\n");
printf(" By Bortolozzi, Giorgi & Paganini\n");
printf("\n\n");
}

int
menu(void)
{
int opcion=0;
do {
    opcion=getint("\n\n\nMenu Principal\n1. Juego nuevo!\n2. Recuperar un juego grabado.\n3. Salir.\n\n");
    if(opcion != 1 && opcion != 2 && opcion != 3)
        printf("\nOpcion no reconocida! Pruebe devuelta.\n\n");
} while(opcion != 1 && opcion != 2 && opcion != 3);
putchar('\n');
return opcion;
}

int
juegoNuevo(int dificultad)
{
do {
    dificultad=getint("Ingrese la dificultad en la que desea jugar!\n1. Facil\n2. Intermedio\n3. Dificil\n\n");
    if(dificultad != 1 && dificultad != 2 && dificultad != 3)
        printf("\nDificultad no reconocida.\n\n");
} while(dificultad != 1 && dificultad != 2 && dificultad != 3);

return dificultad;
}

void
anunciaDific(int dificultad)
{
printf("Ha seleccionado la dificultad ");
switch(dificultad) {
    case FACIL: {
        printf("facil!\nLe deseamos suerte!\n");
        break;
    }
    case INTERMEDIO: {
        printf("intermedio.\nMucha suerte!\n");
        break;
    }
    case DIFICIL: {
        printf("dificil!\nLe deseariamos suerte, pero en nuestra experiencia, no existe tal cosa.\n");
        break;
    }
}
return;
}

int
comienzo(int opcion, juegoT * pjugada)
{
int dificultad=0, salir=0, error;
char * nombreArchivo=NULL;

switch(opcion) {
    case JUEGO_NUEVO: {
        putchar('\n');
        dificultad=juegoNuevo(dificultad);
        putchar('\n');
        anunciaDific(dificultad);
        pjugada->condGanar=condGanar(dificultad);

        pjugada->cantUndos=cantUndo(dificultad);
        pjugada->dim=tamMatriz(dificultad);

        pjugada->matAux=creaMatriz(pjugada->dim);
        pjugada->matMov=creaMatriz(pjugada->dim);
        pjugada->matActual=creaMatriz(pjugada->dim);

        if( pjugada->matActual == NULL || pjugada->matAux==NULL ||  pjugada->matMov == NULL) {
            printf("Oh oh!\nLo lamentamos pero no tiene suficiente espacio para jugar.\n\n");
            return 0;
        }

        pjugada->puntaje=0;
        pjugada->puntAux=0;
        pjugada->puntAnterior=0;
        nuevoNum(pjugada);          					//Agrego 2 random a la matriz
        nuevoNum(pjugada);
        pjugada->flagUndo=1;
        copiaMatriz(pjugada->matMov, pjugada->matActual, pjugada->dim);     //Guardo la nueva en la actual
        copiaMatriz(pjugada->matActual, pjugada->matAux, pjugada->dim);     //Guardo la nueva en la aux

        salir=comienzoJuego(pjugada);
        break;
    }
    case CARGAR: {
        printf("\nIngrese el nombre de la partida a cargar.\n");
		nombreArchivo=tomaLinea();
		if(nombreArchivo==NULL) {
			printf("\nSe produjo un error\n");
			salir=2;
			break;
		}
        printf("\nCargando la partida anterior...\n");
        error=cargarPartida(nombreArchivo, pjugada);
        if(error) {
            printf("\nSe produjo un error al cargar la partida.\n");
            salir=2;
            break;
        }
        salir=comienzoJuego(pjugada);
        break;
    }
    case SALIR: {
        salir=1;
        break;
    }
}
return salir;
}

int
comienzoJuego(juegoT * pjugada)
{
int salir, flagComienzo=1;

putchar('\n');
impMatriz(pjugada->matActual, pjugada);       					//Imprimo y a jugar

salir=comandos(pjugada, &flagComienzo);

return salir;
}


int
leerEntrada(char nombreArchivo[MAX_NOMBRE], char * dirVec)
{
int i=0, j, k, estado=0;
char * ent=NULL, * aux;
char * quit="quit\n";
char * save="save ";
char * undo="undo\n";
char * wmov="w\n";
char * amov="a\n";
char * smov="s\n";
char * dmov="d\n";
char * cheat="Nico\n";						// Para facilitar el checkeo de la condicion de ganar

ent=malloc(CUAT_LETRAS*sizeof(*ent));

ent[i]=getchar();

if(ent[i] == '\n')
    return ERROR;

do {
    i++;
    if(i%CUAT_LETRAS == 0) {
        aux=realloc(ent, (i+CUAT_LETRAS)*sizeof(*ent));
        if(aux==NULL) {
            free(ent);
            return ERROR;
        }
        ent=aux;
    }

    ent[i]=getchar();
} while(ent[i] != '\n');

ent=realloc(ent, i*sizeof(char*));

switch(ent[0]) {
    case 'w': {
        for(k=1; k<=i &&  ent[k] == wmov[k] ; k++)
            ;
        if(k==i+1)
            estado=MOVIMIENTO;
        else
            estado=ERROR;
        break;
    }
    case 'a': {
        for(k=1; k<=i &&  ent[k] == amov[k] ; k++)
            ;
        if(k==i+1)
            estado=MOVIMIENTO;
        else
            estado=ERROR;
        break;
    }
    case 's': {
        if(i==1) {
            for(k=1; k<=i && ent[k] == smov[k]; k++)
                ;
            if(k==2) {
                estado=MOVIMIENTO;
            } else
                estado=ERROR;
        } else {
            for(k=1; k<=CUAT_LETRAS+1 &&  ent[k] == save[k] ; k++)  			// "save" + ' '
                ;
            if(k==5) {
                for(j=0; k<i && k<MAX_NOMBRE; k++, j++)
                    nombreArchivo[j]=ent[k];
                estado=SAVE;
                nombreArchivo[j]=0;
            } else
                estado=ERROR;
        }
        break;
    }
    case 'd': {
        for(k=1; k<=i &&  ent[k] == dmov[k] ; k++)
            ;
        if(k==i+1)
            estado=MOVIMIENTO;
        else
            estado=ERROR;
        break;
    }
    case 'u': {
        for(k=1; k<=i &&  ent[k] == undo[k] ; k++)
            ;
        if(k==i+1)
            estado=UNDO;
        else
            estado=ERROR;
        break;
    }
    case 'q': {
        for(k=1; k<=i &&  ent[k] == quit[k] ; k++)
            ;
        if(k==i+1)
            estado=QUIT;
        else
            estado=ERROR;
        break;
    }
    case 'N': {
        for(k=1; k<=i &&  ent[k] == cheat[k] ; k++)
            ;
        if(k==i+1)
            estado=MOVIMIENTO;
        else
            estado=ERROR;
        break;
    }
    default: {
        estado=ERROR;
        break;
    }
}

*dirVec = ent[0];

return estado;
}

void
impMatriz(int **matriz, juegoT * pjugada)
{
int i, j;
printf("\nLa matriz le quedo asi:\n\n");
for(i=0; i<pjugada->dim; i++) {
    for(j=0; j<pjugada->dim; j++) {
        printf("%d\t", matriz[i][j]);
        if((j+1)%(pjugada->dim)==0)
            printf("\n");
    }
}
printf("Puntaje: %d\n", pjugada->puntaje);
printf("Undos: %d\n\n", pjugada->cantUndos);
}

int
comandos(juegoT * pjugada, int * flagComienzo)
{
char dirVec;
char * nombreArchivo;
int estado=0, salirAMenu=0, guardar, movDisp, movNoNulo=0, finGanaste=0, error=0;
do {
    estado=leerEntrada(nombreArchivo, &dirVec);
    switch(estado) {
        case MOVIMIENTO: {
            pjugada->puntAux=pjugada->puntaje;
            movimiento(&dirVec, pjugada);
            putchar('\n');
            movNoNulo=verificaNoNulo(pjugada);
            if(movNoNulo==1) {
                *flagComienzo=0;
                pjugada->flagUndo=0;
                pjugada->puntAnterior=pjugada->puntAux;
                copiaMatriz(pjugada->matActual, pjugada->matAux, pjugada->dim);
                nuevoNum(pjugada);
                movDisp=movDisponibles(pjugada);
                    if(movDisp==0 && pjugada->cantUndos==0) {
                        impMatriz(pjugada->matMov, pjugada);
                        printf("\n\n\nPerdiste!\n\n\nGracias por jugar!\n\n");
                        return salir(salirAMenu);
                    }
                copiaMatriz(pjugada->matMov, pjugada->matActual, pjugada->dim);
            } else {
                printf("Movimiento nulo\n\n");
            }
                impMatriz(pjugada->matActual, pjugada);
                break;
            }
        case UNDO: {

            if(pjugada->cantUndos>0 && pjugada->flagUndo==0) {
                copiaMatriz(pjugada->matAux, pjugada->matActual, pjugada->dim);
                copiaMatriz(pjugada->matAux, pjugada->matMov, pjugada->dim);
                pjugada->puntaje=pjugada->puntAnterior;
                pjugada->cantUndos--;
                pjugada->flagUndo=1;
            } else if(pjugada->cantUndos<=0) {
                printf("\nNo hay undos disponibles\n");
            } else if(pjugada->flagUndo==1 && *flagComienzo==1) {
                printf("\nNo puede hacer un undo al comienzo del juego\n");
            } else {
                printf("\nNo puede hacer dos undos seguidos\n");
            }
            impMatriz(pjugada->matActual, pjugada);
            break;
        }
        case QUIT: {
            salirAMenu=salir(salirAMenu);
            do {
                guardar=getint("\nDesea guardar antes de salir?\n1. Si.\n2. No.\n\n");
                if(guardar!=1 && guardar!=2)
                    printf("Comando no reconocido.\n");
            } while(guardar!=1 && guardar!=2);
            if(guardar==1) {
                printf("\nIntroduzca el nombre a guardar:\n");
		nombreArchivo=tomaLinea();
                error=guardarPartida(nombreArchivo, pjugada);
                if(error) {
                    printf("\nSe produjo un error al intentar guardar.\nSe ha regresado a la partida.\n\n");
                    estado=0;
                    break;
                } else
                    printf("\nSe ha guardado la partida!\n");
            }
            printf("\nGracias por jugar!\n");
            break;
        }
        case SAVE: {
            error=guardarPartida(nombreArchivo, pjugada);
            if(error)
                printf("\nSe produjo un error al guardar la partida.\n");
            else
                printf("\nSe ha guardado la partida!\n\n");
            break;
        }
        case ERROR: {
            printf("\nComando no reconocido.\nLe recordamos que los comandos reconocidos son:\n");
            printf("w, a, s, d -- movimientos\nsave -- guardar\nundo -- volver un paso atras*\nquit -- salir de la partida al menu\n");
            printf("\n(Todos los comandos deben estar seguidos de un enter)\n");
            printf("\n\n* El comando undo no permite hacer 2 undos seguidos. ");
            printf("Adicionalmente, si hizo un movimiento que no efectuo cambios, el undo le devolvera la matriz anterior al ultimo cambio.\n\n");
            break;
        }
    }
    finGanaste=ganaste(pjugada);
    if(finGanaste) {
        printf("\n\nFelicitaciones! Has ganado!\n\n");
        salirAMenu=salir(salirAMenu);
    }
} while(estado!=QUIT && finGanaste==0);

return salirAMenu;
}

int
salir(int salirAMenu)
{
do {
    salirAMenu=getint("\n1. Salir del 2048\n2. Salir al menu principal\n\n");
    if(salirAMenu!=1 && salirAMenu!=2)
        printf("Comando no reconocido.\n");
} while(salirAMenu!=1 && salirAMenu!=2);
return salirAMenu;
}

char * tomaLinea(void)
{
    int i=0;
	char c;
	char * linea;
	i=0;
	linea=malloc(MAX_NOMBRE*sizeof(*linea));
    while((c=getchar()) != '\n' && i<(MAX_NOMBRE-1)) {
		linea[i]=c;
		i++;
    }
	linea[i]='\0';
    return linea;
}


/* Fin del front-end */
